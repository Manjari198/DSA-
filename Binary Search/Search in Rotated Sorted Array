class Solution {
    public int search(int[] nums, int target) {
        int minpos=findMin(nums);
        int left=binarySearch(nums,0,minpos-1,target);
        int right=binarySearch(nums,minpos,nums.length-1,target);
        
        if(left==-1 && right==-1)
        {
            return -1;
        }
        else if(left==-1)
        {
            return right;
        }
        else
        {
            return left;
        }
    }
    private int findMin(int[] nums)
    {
        int start=0,end=nums.length-1;
        int N=nums.length;
        while(start<=end)
        {
            int mid=start+((end-start)/2);
            
            int prev=(mid+N-1)%N;
            
            if(nums[mid]<=nums[prev])
            {
                return mid;
            }
            else if(nums[mid]<=nums[end])
            {
                end=mid-1;
            }
            else if(nums[start]<=nums[mid])
            {
                start=mid+1;
            }
            
        }
        return -1;
    }
    private int binarySearch(int[] nums,int start,int end,int target)
    {
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(nums[mid]==target)
            {
                return mid;
            }
            else if(target<nums[mid])
            {
                end=mid-1;
            }
            else
            {
                start=mid+1;
            }
        }
        return -1;
    }
}
