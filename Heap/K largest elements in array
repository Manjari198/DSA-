1.Using sorting(Brute force):

class Solution {
    int[] kLargest(int[] arr, int n, int k) {
        // code here
        Arrays.sort(arr);
        int[] newarr=new int[k];
        int j=0;
        for(int i=arr.length-k;i<arr.length;i++)
        {
            newarr[j++]=arr[i];
            
        }
        int l=0,h=newarr.length-1;
        while(l<h)
        {
            int temp=newarr[l];
            newarr[l]=newarr[h];
            newarr[h]=temp;
            l++;
            h--;
        }
        return newarr;
    }
}

2.Using Min Heap(Optimal):

class Solution {
    int[] kLargest(int[] arr, int n, int k) {
        // code here
        PriorityQueue<Integer> minhp=new PriorityQueue<>();
        
        for(int i=0;i<arr.length;i++)
        {
            minhp.add(arr[i]);
            if(minhp.size()>k)
            {
                minhp.poll();
            }
        }
        int newarr[]=new int[k];
        int j=newarr.length-1;
        while(minhp.size()>0)
        {
            newarr[j--]=minhp.poll();
        }
        return newarr;
    }
}
