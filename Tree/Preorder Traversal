1.Using Recursion:

class Solution {
    
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> ans=new ArrayList<>();
        preOrder(root,ans);
        return ans;
        
    }
    
    private void preOrder(TreeNode root,List<Integer> ans)
    {
        if(root==null)
            return;
      
        ans.add(root.val);
        preOrder(root.left,ans);
        preOrder(root.right,ans);
    }
}

2.Using Stack(Iterative approach) DFS:

class Solution {
    
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> ans=new ArrayList<>();
        if(root==null)
            return ans;
        Stack<TreeNode> st=new Stack<TreeNode>();
        
        st.push(root);
        
        while(!st.isEmpty())
        {
            root=st.pop();
            ans.add(root.val);
            if(root.right!=null)
            {
                st.push(root.right);
            }
            if(root.left!=null)
            {
                st.push(root.left);
            }
            
        }
        return ans;
        
    }
 }
 
3. In Python:

class Node:
    
    def __init__(self,val):
        
        self.val=val
        self.left=None
        self.right=None

def preorder(root,l):
    
    if root==None:
        return
    l.append(root.val)
    preorder(root.left,l)
    preorder(root.right,l)
    
myroot=Node(1)
myroot.left=Node(2)
myroot.right=Node(3)
myroot.left.left=Node(4)
myroot.left.right=Node(5)
ans=[]
preorder(myroot,ans)
print(ans)
