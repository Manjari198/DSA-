class Solution
{
    public static void leftBoundary(Node root,ArrayList<Integer> ans){
        if(root==null)
        {
            return;
        }
        
        if(root.left==null && root.right==null)
        {
            return;
        }
        ans.add(root.data);
        if(root.left==null)
        {
            leftBoundary(root.right,ans);
        }
        else
        {
            leftBoundary(root.left,ans);
        }
    }
    public static void rightBoundary(Node root,ArrayList<Integer> ans)
    {
        if(root==null)
        {
            return;
        }
        
        if(root.left==null && root.right==null)
        {
            return;
        }
        if(root.right==null)
        {
            rightBoundary(root.left,ans);   
        }
        else
        {
            rightBoundary(root.right,ans);
        }
        ans.add(root.data);
        
    }
    public static void leafs(Node root,ArrayList<Integer> ans)
    {
        if(root==null)
        {
            return;
        }
        if(root.left==null && root.right==null)
        {
            ans.add(root.data);
        }
        leafs(root.left,ans);
        leafs(root.right,ans);
    }
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> ans=new ArrayList<Integer>();
	    if(node==null)
	    {
	        return ans;
	    }
	    if(node.left==null && node.right==null)
	    {
	        ans.add(node.data);
	        return ans;
	    }
	    ans.add(node.data);
	    leftBoundary(node.left,ans);
	    leafs(node,ans);
	    rightBoundary(node.right,ans);
	    return ans;
	}
}
