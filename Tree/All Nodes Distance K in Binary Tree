class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> res=new ArrayList<>();
        if(root==null)
            return res;
        Map<TreeNode,TreeNode> parentMap=new HashMap<>();
        findParent(root,parentMap);
        HashSet<TreeNode> visited=new HashSet<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(target);
        while(!queue.isEmpty())
        {
            int len=queue.size();
            for(int i=0;i<len;i++)
            {
                TreeNode cur=queue.poll();
                visited.add(cur);
                if(k==0)
                {
                    res.add(cur.val);
                }
                if(parentMap.containsKey(cur) && !visited.contains(parentMap.get(cur)))
                {
                    queue.offer(parentMap.get(cur));
                }
                if(cur.left!=null && !visited.contains(cur.left))
                {
                    queue.offer(cur.left);
                }
                if(cur.right!=null && !visited.contains(cur.right))
                {
                    queue.offer(cur.right);
                }
            }
            k--;
            if(k<0)
            {
                break;
            }
            
        }
        return res;
    }
    private void findParent(TreeNode root,Map<TreeNode,TreeNode> parentMap)
    {
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty())
        {
            TreeNode cur=q.poll();
            if(cur.left!=null)
            {
                parentMap.put(cur.left,cur);
                q.offer(cur.left);
            }
            if(cur.right!=null)
            {
                
                parentMap.put(cur.right,cur);
                q.offer(cur.right);
            }
        }
    }
}
